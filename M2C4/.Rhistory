geom_segment(x = 17, xend = 17, y = 662, yend = 640, color = "red", lty = 2, size = 1) +
geom_segment(x = 0, xend = 17, y = 662, yend = 662, color = "red", lty = 2, size = 1) +
geom_point(x = 17, y = 662, size = 2, col = "red") +
geom_point(x = 23.5, y = 642.5, size = 2, col = "red") +
geom_text(x = 16.3, y = 639, label = "(17; 640)", color = "red", size = 3.5) +
geom_text(x = 17.6, y = 664, label = "(17; 662)", color = "red", size = 3.5)   +
theme_minimal()
ggplot(datos_colegio, aes(REP, Resultados)) +
geom_abline(aes(intercept = 713, slope = -3), size = 2, col = "blue") +
geom_point(size = 3) +
theme_minimal()
ggplot(datos_colegio, aes(REP, Resultados)) +
geom_abline(aes(intercept = 713, slope = -3), size = 2, col = "blue") +
geom_segment(x = 23.5, xend = 23.5, y = 642.5, yend = 660, color = "red", lty = 2, size = 1) +
geom_point(size = 3) +
theme_minimal()
ggplot(datos_colegio, aes(REP, Resultados)) +
geom_abline(aes(intercept = 713, slope = -3), size = 2, col = "blue") +
geom_segment(x = 23.5, xend = 23.5, y = 642.5, yend = 660, color = "red", lty = 2, size = 1) +
geom_point(size = 3) +
geom_point(data = datos_colegio_6,
color = "red",
size = 4) +
theme_minimal()
summary(lm(Resultados ~ REP, data = datos_colegio))
1466.85/5
modelo <- lm(Resultados ~ REP, data = datos_colegio)
modelo$residuals
modelo$residuals %>% sd
glance(modelo)
augment(modelo)
ggplot(datos_colegio, aes(REP, Resultados)) +
geom_point(size = 3) +
geom_smooth(method = "glm", se = FALSE, size = 2) + #<<
theme_minimal()
glm(Resultados ~ REP, data = datos_colegio)
beta_0 = mean(Y)-(beta_1*mean(X)))
(coeficientes <- datos_reg %>%
transmute(Y = Resultados,
X = REP) %>%
summarise(beta_1 = cov(X,Y)/(sd(X)*sd(Y)),
beta_0 = mean(Y)-(beta_1*mean(X))))
?sd
(coeficientes <- datos_reg %>%
transmute(Y = Resultados,
X = REP) %>%
summarise(beta_1 = cov(X,Y)/var(X),
beta_0 = mean(Y)-(beta_1*mean(X))))
modelo1 <- glm(Resultados ~ REP, data = datos_reg)
summary(modelo1)
datos_reg %>%
transmute(X = REP,
Y = Resultados) %>%
summarise(SCE = sum(((coeficientes$beta_0+(coeficientes$beta_1*X))-mean(Y))^2),
SCT = sum((Y-mean(Y))^2),
R2 = round(SCR/SCT, 5))
datos_reg %>%
transmute(X = REP,
Y = Resultados) %>%
summarise(SCE = sum(((coeficientes$beta_0+(coeficientes$beta_1*X))-mean(Y))^2),
SCT = sum((Y-mean(Y))^2),
R2 = round(SCE/SCT, 5))
coeficientes
?augment
datos_reg %>%
ggplot(aes(x = Resultados)) +
geom_boxplot()
datos_reg %>%
ggplot(aes(x = grupo_ingresos, y = Resultados)) +
geom_boxplot()
datos_reg %>%
ggplot(aes(x = grupo_ingresos, y = Resultados)) +
geom_boxplot() +
theme_minimal()
datos_reg %>%
ggplot(aes(x = grupo_ingresos, y = Resultados)) +
geom_boxplot() +
theme_minimal()
lm(Resultados~grupo_ingresos, data = datos_reg) %>% summary
summary(modelo2)
(modelo2 <- lm(Resultados~grupo_ingresos, data = datos_reg))
summary(modelo2)
glance(modelo1)
glance(modelo1)$adj.r.squared
glance(modelo2)$adj.r.squared
modelo1 <- lm(Resultados ~ REP, data = datos_reg)
summary(modelo1)
glance(modelo1)
glance(modelo2)$r.squared
glance(modelo1)$r.squared
##################
## Cargar datos ##
##################
censo <- read_csv("../datos/muestra_censo_2017.csv")
######################
library(readr) # Cargar datos
library(dplyr) # Manejo de datos
library(stringr) # Manejo de texto
library(ggplot2)
##################
## Cargar datos ##
##################
censo <- read_csv("../datos/muestra_censo_2017.csv")
# Calcule el % de personas en la poblacion que declaran ser parte
# de pueblos originarios
censo %>%
group_by(p_originario) %>%
summarise(n = n()) %>%
mutate(prop = n/sum(n))
# Tome una muestra aleatoria de 300 (n) observaciones desde la poblacion
# y solo deje la columna correspondiente a "p_originario"
# Llame a este nuevo objeto "muestra_censo_ej"
set.seed(1) # para tener los mismos resultados
(muestra_censo_ej <- censo %>%
sample_n(300) %>%
select(p_originario))
# Calcule el % de personas en la muestra que declaran ser parte
# de pueblos originarios. ¿Es similar al valor estimado para la población?
muestra_censo_ej %>%
group_by(p_originario) %>%
summarise(n = n()) %>%
mutate(prop = n/sum(n))
# Haga lo mismo usando las funciones del paquete "infer".
# Llame a este objeto "prop_p_orig_muestra"
(prop_p_orig_muestra <- muestra_censo_ej %>%
specify(response = p_originario, success = "si") %>%
calculate(stat = "prop"))
library(infer) # Inferencia estadística
library(ggplot2) # Visualización de datos
##################
## Cargar datos ##
##################
censo <- read_csv("../datos/muestra_censo_2017.csv")
# Calcule el % de personas en la poblacion que declaran ser parte
# de pueblos originarios
censo %>%
group_by(p_originario) %>%
summarise(n = n()) %>%
mutate(prop = n/sum(n))
# Tome una muestra aleatoria de 300 (n) observaciones desde la poblacion
# y solo deje la columna correspondiente a "p_originario"
# Llame a este nuevo objeto "muestra_censo_ej"
set.seed(1) # para tener los mismos resultados
(muestra_censo_ej <- censo %>%
sample_n(300) %>%
select(p_originario))
# Calcule el % de personas en la muestra que declaran ser parte
# de pueblos originarios. ¿Es similar al valor estimado para la población?
muestra_censo_ej %>%
group_by(p_originario) %>%
summarise(n = n()) %>%
mutate(prop = n/sum(n))
# Haga lo mismo usando las funciones del paquete "infer".
# Llame a este objeto "prop_p_orig_muestra"
(prop_p_orig_muestra <- muestra_censo_ej %>%
specify(response = p_originario, success = "si") %>%
calculate(stat = "prop"))
# Usando las funciones del paquete "infer" saque 1000 remuestras usando "bootstrap"
# Y calcule para cada muestra el % de personas que declaran ser parte de un
# pueblo originario. Llame a este objeto "remuestras_p_orig".
(remuestras_p_orig <- muestra_censo_ej %>%
specify(response = p_originario, success = "si") %>%
generate(reps = 1000,
type = "bootstrap") %>%
calculate(stat = "prop"))
# Grafique la distribución (histograma) de los 1000 % calculados a partir de
# las remuestras. Haga el histograma con 15 barras y con lineas colo blanco.
remuestras_p_orig %>%
ggplot(aes(x = stat)) +
geom_histogram(bins = 15, color = "white")
# Compare el gráfico recién hecho con el resultante usando la función
# "visualise()" del paquete "infer".
remuestras_p_orig %>%
visualise()
# Calcule el intervalo de confianza usando los métodos de percentiles y error estándar
# ¿Son similares los I.C.? ¿Contienen los I.C. el valor real del % de personas
# que en la población declaran ser parte de prueblos originales?
remuestras_p_orig %>%
get_confidence_interval(level = 0.95,
type = "percentile")
remuestras_p_orig %>%
get_confidence_interval(level = 0.95,
type = "se",
point_estimate = prop_p_orig_muestra)
remuestras_p_orig %>%
get_confidence_interval(level = 0.85,
type = "se",
point_estimate = prop_p_orig_muestra)
remuestras_p_orig %>%
get_confidence_interval(level = 0.45,
type = "se",
point_estimate = prop_p_orig_muestra)
remuestras_p_orig %>%
get_confidence_interval(level = 0.99,
type = "se",
point_estimate = prop_p_orig_muestra)
##################
## Cargar datos ##
##################
# EJECUTE ESTE CÓDIGO
datos_satisfaccion <- c(rep("satisfecho", 146), rep("no satisfecho", 54)) %>%
data.frame() %>%
rename("satisfaccion" = 1) %>%
mutate(satisfaccion = as.factor(satisfaccion))
# Explore los datos
summary(datos_satisfaccion)
# Calcule el porcentaje de personas que reportan estar satisfechas
datos_satisfaccion %>%
group_by(satisfaccion) %>%
summarise(n_casos = n()) %>%
mutate(prop_casos = n_casos/sum(n_casos))
# Haga lo mismo usando las funciones del paquete "infer" y guarde el resultado
# en un objeto llamado "p_hat"
(p_hat <- datos_satisfaccion %>%
specify(response = satisfaccion, success = "satisfecho") %>%
calculate(stat = "prop"))
# Simule una distribución asumiendo que la hipotesis nula (p = 0.8) es cierta
# guarde este resultado como "distribucion_nula
set.seed(2)
(distribucion_nula <- datos_satisfaccion %>%
specify(response = satisfaccion, success = "satisfecho") %>%
hypothesise(null = "point", p = 0.8) %>%
generate(reps = 1000) %>%
calculate(stat = "prop"))
# Visualice "distribucion_nula"
distribucion_nula %>%
visualise(bins = 10)
# Visualice el "p-value"
distribucion_nula %>%
visualise(bins = 10) +
shade_p_value(obs_stat = p_hat,
direction = "both")
# Calcule el "p-vale" y asigne este valor al objeto "p_value"
(p_value <- distribucion_nula %>%
get_p_value(obs_stat = p_hat, direction = "both"))
datos_satisfaccion %>%
specify(response = satisfaccion, success = "satisfecho") %>%
generate(reps = 10000) %>%
calculate(stat = "prop") %>%
get_confidence_interval()
datos_satisfaccion %>%
specify(response = satisfaccion, success = "satisfecho") %>%
generate(reps = 10000) %>%
calculate(stat = "prop") %>%
visualise()
# Calcule el "p-vale" y asigne este valor al objeto "p_value"
(p_value <- distribucion_nula %>%
get_p_value(obs_stat = p_hat, direction = "both"))
datos_satisfaccion %>%
specify(response = satisfaccion, success = "satisfecho") %>%
generate(reps = 10000) %>%
calculate(stat = "prop") %>%
get_confidence_interval()
# Calcule el "p-vale" y asigne este valor al objeto "p_value"
(p_value <- distribucion_nula %>%
get_p_value(obs_stat = p_hat, direction = "both"))
# Visualice el "p-value"
distribucion_nula %>%
visualise(bins = 10) +
shade_p_value(obs_stat = p_hat,
direction = "both")
p_hat
# Calcule el "p-vale" y asigne este valor al objeto "p_value"
(p_value <- distribucion_nula %>%
get_p_value(obs_stat = p_hat, direction = "both"))
distribucion_nula %>%
shade_confidence_interval()
datos_satisfaccion %>%
specify(response = satisfaccion, success = "satisfecho") %>%
generate(reps = 10000) %>%
calculate(stat = "prop") %>%
get_confidence_interval()
p_hat
datos_satisfaccion %>%
specify(response = satisfaccion, success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval()
datos_satisfaccion %>%
specify(response = satisfaccion, success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval()
datos_satisfaccion %>%
specify(response = satisfaccion, success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval()
datos_satisfaccion %>%
specify(response = satisfaccion, success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval()
datos_satisfaccion %>%
specify(response = satisfaccion, success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.95)
datos_satisfaccion %>%
specify(response = satisfaccion, success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.99)
datos_satisfaccion %>%
specify(response = satisfaccion, success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.95)
# Calcule el "p-vale" y asigne este valor al objeto "p_value"
(p_value <- distribucion_nula %>%
get_p_value(obs_stat = p_hat,
direction = "both"))
datos_satisfaccion %>%
specify(response = satisfaccion, success = "satisfecho") %>%
generate(reps = 10000) %>%
calculate(stat = "prop") %>%
visualise()
datos_satisfaccion %>%
specify(response = satisfaccion, success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop")
# Calcule el intervalo de confianza con un nivel de confianza de95%
datos_satisfaccion %>%
specify(response = satisfaccion, success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.95)
# Calcule el "p-vale" y asigne este valor al objeto "p_value"
(p_value <- distribucion_nula %>%
get_p_value(obs_stat = p_hat,
direction = "both"))
# Calcule el "p-vale" y asigne este valor al objeto "p_value"
(p_value <- distribucion_nula %>%
get_p_value(obs_stat = p_hat,
direction = "both"))
# Calcule el intervalo de confianza con un nivel de confianza de 95%
datos_satisfaccion %>%
specify(response = satisfaccion,
success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.95)
# ¿Podemos rechazar la hipótesis nula?
p_value<0.05
# Calcule el intervalo de confianza con un nivel de confianza de 95%
datos_satisfaccion %>%
specify(response = satisfaccion,
success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.95)
# Calcule el intervalo de confianza con un nivel de confianza de 95%
datos_satisfaccion %>%
specify(response = satisfaccion,
success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.95)
# Incluye este I.C. el valor correspondiente a la hipótesis nula?
0.8 %in% c(0.665, 0.79)
# Explore los datos
summary(datos_satisfaccion)
# Calcule el intervalo de confianza con un nivel de confianza de 95%
datos_satisfaccion %>%
specify(response = satisfaccion,
success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.95)
# Calcule el intervalo de confianza con un nivel de confianza de 95%
datos_satisfaccion %>%
specify(response = satisfaccion,
success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.95)
# Calcule el intervalo de confianza con un nivel de confianza de 95%
datos_satisfaccion %>%
specify(response = satisfaccion,
success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.95)
# Calcule el intervalo de confianza con un nivel de confianza de 95%
datos_satisfaccion %>%
specify(response = satisfaccion,
success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.95)
# Calcule el intervalo de confianza con un nivel de confianza de 95%
datos_satisfaccion %>%
specify(response = satisfaccion,
success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.95)
# Calcule el intervalo de confianza con un nivel de confianza de 95%
datos_satisfaccion %>%
specify(response = satisfaccion,
success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.95)
# Calcule el intervalo de confianza con un nivel de confianza de 95%
datos_satisfaccion %>%
specify(response = satisfaccion,
success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.95)
# Calcule el intervalo de confianza con un nivel de confianza de 95%
datos_satisfaccion %>%
specify(response = satisfaccion,
success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.95)
# Calcule el intervalo de confianza con un nivel de confianza de 95%
datos_satisfaccion %>%
specify(response = satisfaccion,
success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.95)
# Calcule el intervalo de confianza con un nivel de confianza de 95%
datos_satisfaccion %>%
specify(response = satisfaccion,
success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.95)
# Calcule el intervalo de confianza con un nivel de confianza de 95%
datos_satisfaccion %>%
specify(response = satisfaccion,
success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.95)
# Calcule el intervalo de confianza con un nivel de confianza de 95%
datos_satisfaccion %>%
specify(response = satisfaccion,
success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.95)
# Calcule el intervalo de confianza con un nivel de confianza de 95%
datos_satisfaccion %>%
specify(response = satisfaccion,
success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.95)
# Calcule el intervalo de confianza con un nivel de confianza de 95%
datos_satisfaccion %>%
specify(response = satisfaccion,
success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.95)
# Calcule el intervalo de confianza con un nivel de confianza de 95%
datos_satisfaccion %>%
specify(response = satisfaccion,
success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.95)
# Calcule el intervalo de confianza con un nivel de confianza de 95%
datos_satisfaccion %>%
specify(response = satisfaccion,
success = "satisfecho") %>%
generate(reps = 1000) %>%
calculate(stat = "prop") %>%
get_confidence_interval(level = 0.95)
######################
## Cargar librerías ##
######################
library(dplyr) # Manejo de datos
library(infer) # Inferencia estadística
##################
## Cargar datos ##
##################
# EJECUTE ESTE CÓDIGO
datos_satisfaccion <- c(rep("satisfecho", 146), rep("no satisfecho", 54)) %>%
data.frame() %>%
rename("satisfaccion" = 1) %>%
mutate(satisfaccion = as.factor(satisfaccion))
# Explore los datos
summary(datos_satisfaccion)
# Calcule el porcentaje de personas que reportan estar satisfechas
datos_satisfaccion %>%
group_by(satisfaccion) %>%
summarise(n_casos = n()) %>%
mutate(prop_casos = n_casos/sum(n_casos))
# Haga lo mismo usando las funciones del paquete "infer" y guarde el resultado
# en un objeto llamado "p_hat"
(p_hat <- datos_satisfaccion %>%
specify(response = satisfaccion, success = "satisfecho") %>%
calculate(stat = "prop"))
# Simule una distribución asumiendo que la hipotesis nula (p = 0.8) es cierta
# guarde este resultado como "distribucion_nula
set.seed(2)
(distribucion_nula <- datos_satisfaccion %>%
specify(response = satisfaccion, success = "satisfecho") %>%
hypothesise(null = "point", p = 0.8) %>%
generate(reps = 1000) %>%
calculate(stat = "prop"))
(distribucion_nula <- datos_satisfaccion %>%
specify(response = satisfaccion, success = "satisfecho") %>%
hypothesise(null = "point", p = 0.8) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "prop"))
